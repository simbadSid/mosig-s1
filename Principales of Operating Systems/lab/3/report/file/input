#include "myshell.h"





// Ended children table: is filled when a bg child ends to delay the display of this event
int ended_children_table[MAXJOBS];
int stopped_children_table[MAXJOBS];
int indexEnded;					// Indicates the first empty cell of ended_children_table
int indexStopped;				// Indicates the first empty cell of stopped_children_table




// ---------------------------------------------------
// Reacts to the reception of a SIGINT
// Relay the signal to the fg job
// ---------------------------------------------------
void handler_SIGINT(int sig) {
	pid_t fg = getFgJob();

	if (fg == -1)	return; // no FG
	else		kill(fg, SIGINT);
}

// ---------------------------------------------------
// Reacts to the reception of a SIGINT
// Relay the signal to the fg job
// ---------------------------------------------------
void handler_SIGTSTP(int sig) {
	pid_t fg = getFgJob();

	if (fg == -1)	return; // no FG
	else		kill(fg, SIGTSTP);

	update_pid_job(fg, STOPPED);
	
}

// ---------------------------------------------------
// Reacts to the end of a child process (fg or bg)
// Errases all the ended processes (fg and bg)
// Updates the job table
// Marks the ended bg processes to be printed at the end of the current command
// ---------------------------------------------------
void handler_SIGCHLD(int sig) {
	int status, test;
	pid_t pid;
	pid_t fg = getFgJob();

	while ((pid = waitpid(-1, &status, WNOHANG|WUNTRACED)) > 0) {
		if (WIFEXITED(status) || WIFSIGNALED(status)) {		// Case killed
			test = update_pid_job(pid, KILLED);
			if	(test == JOB_NOT_FOUND) printf("*** handler_SIGCHLD error: job not found: %d ***\n", pid);
			else if	(pid == fg)	waitfg = 0;
			else {
				ended_children_table[indexEnded] = get_num_job(pid);
				indexEnded++;
			}
		}
		else {							// Case stopped
			test = update_pid_job(pid, STOPPED);
			if	(test == JOB_NOT_FOUND) printf("*** handler_SIGCHLD error: job not found: %d ***\n", pid);
			else if	(pid == fg)	waitfg = 0;
			else {
				stopped_children_table[indexStopped] = get_num_job(pid);
				indexStopped++;
			}
		}
	}
}

// ---------------------------------------------------
// Print and clear each ended child from the job table
// Print each stopped child
// ---------------------------------------------------
void printChangedJobs()
{
	int i;

	entree_section_critique();
	for(i=0; i < indexEnded; i++) {			//	Print and clear each ended child from the job table
		if(!ended_children_table[i]) break;
		printJob(ended_children_table[i]);
		del_num_job(ended_children_table[i]);
	}
	indexEnded = 0;
	for(i=0; i < indexStopped; i++) {		//	Print each stopped child
		if(!stopped_children_table[i]) break;
		printJob(stopped_children_table[i]);
	}
	indexStopped = 0;
	sortie_section_critique();
}

// ---------------------------------------------------
// Cleans the job table and kills the remaining children
// ---------------------------------------------------
void quit() {
	entree_section_critique();
	delete_jobs();
	sortie_section_critique();
	printChangedJobs();

	printf("\n\n==============================\n");
	printf("       End of the shell\n");
	printf("==============================\n");
	exit(0);
}


int main()
{
	char cmdline[MAXLINE];					// Command line
	char test;

	init_jobs();						// Initialisation
	ended_children_table[0]		= 0;
	stopped_children_table[0]	= 0;
	indexEnded			= 0;
	indexStopped			= 0;
	Signal(SIGINT,	handler_SIGINT);
	Signal(SIGCHLD, handler_SIGCHLD);
	Signal(SIGTSTP,	handler_SIGTSTP);
	while (1) {						// For each command line:
		printf("<my_shell> ");				//	Message for user
		Fgets(cmdline, MAXLINE, stdin);			//	Read the command line
		if (feof(stdin))	quit();			//	case Signal ctrl-D:
		printChangedJobs();
		test = eval(cmdline);				//	Process command
		if (test < 0) printEvalError(test);
	}
}
